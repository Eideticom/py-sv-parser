//! Python binding for sv-parser crate.
//!
//! Generates a second tree out of python-friendly objects from
//! the parsed tree generated by sv-parser. This could likely be made
//! more efficient by making iterators operate directly on the tree,
//! but that's very much above my skill level at the moment.

// Turns out large syntax trees can recurse a lot.
#![recursion_limit = "256"]

mod defines;
mod iterators;
mod tree;

use pyo3::prelude::*;
use pyo3::{wrap_pyfunction, PyIterProtocol};

use defines::*;
use iterators::*;
use tree::*;

/// Finds the first node of one of the given types in the provided node.
#[pyfunction]
#[text_signature = "(node, node_types)"]
fn unwrap_node(
    node: PyRefMut<PySyntaxNode>,
    node_types: Vec<String>,
) -> PyResult<Option<Py<PySyntaxNode>>> {
    return Python::with_gil(|py| {
        let iter = PySyntaxNode::__iter__(node).unwrap();
        let iter = PyCell::new(py, iter).unwrap();
        loop {
            let node = NodeIter::__next__(iter.borrow_mut());

            if let Some(node) = node {
                if node_types.contains(&node.type_name) {
                    return Ok(Some(Py::new(py, node).unwrap()));
                }
            } else {
                break;
            }
        }

        Ok(None)
    });
}

/// Finds the first locate node in the provided node.
#[pyfunction]
#[text_signature = "(node)"]
fn unwrap_locate(node: PyRefMut<PySyntaxNode>) -> PyResult<Option<Py<PySyntaxNode>>> {
    unwrap_node(node, vec![String::from("Locate")])
}

/// Simple Python wrapper for sv-parser.
///
/// Does not export all features, but allows you to build a simple tree from an SV file.
#[pymodule]
fn py_sv_parser(_py: Python, module: &PyModule) -> PyResult<()> {
    module.add_class::<PySyntaxTree>()?;
    module.add_class::<PyDefine>()?;
    module.add_function(wrap_pyfunction!(unwrap_node, module)?)?;
    module.add_function(wrap_pyfunction!(unwrap_locate, module)?)?;

    // I'm only adding these classes for typing information, these should
    // not be directly instantiated.
    module.add_class::<PySyntaxNode>()?;
    module.add_class::<PySyntaxLocation>()?;

    Ok(())
}
